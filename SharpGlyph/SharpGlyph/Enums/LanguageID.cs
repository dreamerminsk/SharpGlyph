using System;
namespace SharpGlyph {
	public class LanguageID {
		public class Macintosh {
			public static string ToName(ushort id) {
				switch (id) {
					case 0: return "English";
					case 1: return "French";
					case 2: return "German";
					case 3: return "Italian";
					case 4: return "Dutch";
					case 5: return "Swedish";
					case 6: return "Spanish";
					case 7: return "Danish";
					case 8: return "Portuguese";
					case 9: return "Norwegian";
					case 10: return "Hebrew";
					case 11: return "Japanese";
					case 12: return "Arabic";
					case 13: return "Finnish";
					case 14: return "Greek";
					case 15: return "Icelandic";
					case 16: return "Maltese";
					case 17: return "Turkish";
					case 18: return "Croatian";
					case 19: return "Chinese (Traditional)";
					case 20: return "Urdu";
					case 21: return "Hindi";
					case 22: return "Thai";
					case 23: return "Korean";
					case 24: return "Lithuanian";
					case 25: return "Polish";
					case 26: return "Hungarian";
					case 27: return "Estonian";
					case 28: return "Latvian";
					case 29: return "Sami";
					case 30: return "Faroese";
					case 31: return "Farsi/Persian";
					case 32: return "Russian";
					case 33: return "Chinese (Simplified)";
					case 34: return "Flemish";
					case 35: return "Irish Gaelic";
					case 36: return "Albanian";
					case 37: return "Romanian";
					case 38: return "Czech";
					case 39: return "Slovak";
					case 40: return "Slovenian";
					case 41: return "Yiddish";
					case 42: return "Serbian";
					case 43: return "Macedonian";
					case 44: return "Bulgarian";
					case 45: return "Ukrainian";
					case 46: return "Byelorussian";
					case 47: return "Uzbek";
					case 48: return "Kazakh";
					case 49: return "Azerbaijani (Cyrillic script)";
					case 50: return "Azerbaijani (Arabic script)";
					case 51: return "Armenian";
					case 52: return "Georgian";
					case 53: return "Moldavian";
					case 54: return "Kirghiz";
					case 55: return "Tajiki";
					case 56: return "Turkmen";
					case 57: return "Mongolian (Mongolian script)";
					case 58: return "Mongolian (Cyrillic script)";
					case 59: return "Pashto";
					case 60: return "Kurdish";
					case 61: return "Kashmiri";
					case 62: return "Sindhi";
					case 63: return "Tibetan";
					case 64: return "Nepali";
					case 65: return "Sanskrit";
					case 66: return "Marathi";
					case 67: return "Bengali";
					case 68: return "Assamese";
					case 69: return "Gujarati";
					case 70: return "Punjabi";
					case 71: return "Oriya";
					case 72: return "Malayalam";
					case 73: return "Kannada";
					case 74: return "Tamil";
					case 75: return "Telugu";
					case 76: return "Sinhalese";
					case 77: return "Burmese";
					case 78: return "Khmer";
					case 79: return "Lao";
					case 80: return "Vietnamese";
					case 81: return "Indonesian";
					case 82: return "Tagalog";
					case 83: return "Malay (Roman script)";
					case 84: return "Malay (Arabic script)";
					case 85: return "Amharic";
					case 86: return "Tigrinya";
					case 87: return "Galla";
					case 88: return "Somali";
					case 89: return "Swahili";
					case 90: return "Kinyarwanda/Ruanda";
					case 91: return "Rundi";
					case 92: return "Nyanja/Chewa";
					case 93: return "Malagasy";
					case 94: return "Esperanto";
					case 128: return "Welsh";
					case 129: return "Basque";
					case 130: return "Catalan";
					case 131: return "Latin";
					case 132: return "Quechua";
					case 133: return "Guarani";
					case 134: return "Aymara";
					case 135: return "Tatar";
					case 136: return "Uighur";
					case 137: return "Dzongkha";
					case 138: return "Javanese (Roman script)";
					case 139: return "Sundanese (Roman script)";
					case 140: return "Galician";
					case 141: return "Afrikaans";
					case 142: return "Breton";
					case 143: return "Inuktitut";
					case 144: return "Scottish Gaelic";
					case 145: return "Manx Gaelic";
					case 146: return "Irish Gaelic (with dot above)";
					case 147: return "Tongan";
					case 148: return "Greek (polytonic)";
					case 149: return "Greenlandic";
					case 150: return "Azerbaijani (Roman script)";
				}
				return id.ToString("X4");
			}
		}

		public class Windows {
			public static string ToName(ushort id) {
				switch (id) {
					case 0x0436: return "Afrikaans/South Africa";
					case 0x041C: return "Albanian/Albania";
					case 0x0484: return "Alsatian/France";
					case 0x045E: return "Amharic/Ethiopia";
					case 0x1401: return "Arabic/Algeria";
					case 0x3C01: return "Arabic/Bahrain";
					case 0x0C01: return "Arabic/Egypt";
					case 0x0801: return "Arabic/Iraq";
					case 0x2C01: return "Arabic/Jordan";
					case 0x3401: return "Arabic/Kuwait";
					case 0x3001: return "Arabic/Lebanon";
					case 0x1001: return "Arabic/Libya";
					case 0x1801: return "Arabic/Morocco";
					case 0x2001: return "Arabic/Oman";
					case 0x4001: return "Arabic/Qatar";
					case 0x0401: return "Arabic/Saudi Arabia";
					case 0x2801: return "Arabic/Syria";
					case 0x1C01: return "Arabic/Tunisia";
					case 0x3801: return "Arabic/U.A.E.";
					case 0x2401: return "Arabic/Yemen";
					case 0x042B: return "Armenian/Armenia";
					case 0x044D: return "Assamese/India";
					case 0x082C: return "Azeri (Cyrillic)/Azerbaijan";
					case 0x042C: return "Azeri (Latin)/Azerbaijan";
					case 0x046D: return "Bashkir/Russia";
					case 0x042D: return "Basque/Basque";
					case 0x0423: return "Belarusian/Belarus";
					case 0x0845: return "Bengali/Bangladesh";
					case 0x0445: return "Bengali/India";
					case 0x201A: return "Bosnian (Cyrillic)/Bosnia and Herzegovina";
					case 0x141A: return "Bosnian (Latin)/Bosnia and Herzegovina";
					case 0x047E: return "Breton/France";
					case 0x0402: return "Bulgarian/Bulgaria";
					case 0x0403: return "Catalan/Catalan";
					case 0x0C04: return "Chinese/Hong Kong S.A.R.";
					case 0x1404: return "Chinese/Macao S.A.R.";
					case 0x0804: return "Chinese/People’s Republic of China";
					case 0x1004: return "Chinese/Singapore";
					case 0x0404: return "Chinese/Taiwan";
					case 0x0483: return "Corsican/France";
					case 0x041A: return "Croatian/Croatia";
					case 0x101A: return "Croatian (Latin)/Bosnia and Herzegovina";
					case 0x0405: return "Czech/Czech Republic";
					case 0x0406: return "Danish/Denmark";
					case 0x048C: return "Dari/Afghanistan";
					case 0x0465: return "Divehi/Maldives";
					case 0x0813: return "Dutch/Belgium";
					case 0x0413: return "Dutch/Netherlands";
					case 0x0C09: return "English/Australia";
					case 0x2809: return "English/Belize";
					case 0x1009: return "English/Canada";
					case 0x2409: return "English/Caribbean";
					case 0x4009: return "English/India";
					case 0x1809: return "English/Ireland";
					case 0x2009: return "English/Jamaica";
					case 0x4409: return "English/Malaysia";
					case 0x1409: return "English/New Zealand";
					case 0x3409: return "English/Republic of the Philippines";
					case 0x4809: return "English/Singapore";
					case 0x1C09: return "English/South Africa";
					case 0x2C09: return "English/Trinidad and Tobago";
					case 0x0809: return "English/United Kingdom";
					case 0x0409: return "English/United States";
					case 0x3009: return "English/Zimbabwe";
					case 0x0425: return "Estonian/Estonia";
					case 0x0438: return "Faroese/Faroe Islands";
					case 0x0464: return "Filipino/Philippines";
					case 0x040B: return "Finnish/Finland";
					case 0x080C: return "French/Belgium";
					case 0x0C0C: return "French/Canada";
					case 0x040C: return "French/France";
					case 0x140c: return "French/Luxembourg";
					case 0x180C: return "French/Principality of Monaco";
					case 0x100C: return "French/Switzerland";
					case 0x0462: return "Frisian/Netherlands";
					case 0x0456: return "Galician/Galician";
					case 0x0437: return "Georgian/Georgia";
					case 0x0C07: return "German/Austria";
					case 0x0407: return "German/Germany";
					case 0x1407: return "German/Liechtenstein";
					case 0x1007: return "German/Luxembourg";
					case 0x0807: return "German/Switzerland";
					case 0x0408: return "Greek/Greece";
					case 0x046F: return "Greenlandic/Greenland";
					case 0x0447: return "Gujarati/India";
					case 0x0468: return "Hausa (Latin)/Nigeria";
					case 0x040D: return "Hebrew/Israel";
					case 0x0439: return "Hindi/India";
					case 0x040E: return "Hungarian/Hungary";
					case 0x040F: return "Icelandic/Iceland";
					case 0x0470: return "Igbo/Nigeria";
					case 0x0421: return "Indonesian/Indonesia";
					case 0x045D: return "Inuktitut/Canada";
					case 0x085D: return "Inuktitut (Latin)/Canada";
					case 0x083C: return "Irish/Ireland";
					case 0x0434: return "isiXhosa/South Africa";
					case 0x0435: return "isiZulu/South Africa";
					case 0x0410: return "Italian/Italy";
					case 0x0810: return "Italian/Switzerland";
					case 0x0411: return "Japanese/Japan";
					case 0x044B: return "Kannada/India";
					case 0x043F: return "Kazakh/Kazakhstan";
					case 0x0453: return "Khmer/Cambodia";
					case 0x0486: return "K’iche/Guatemala";
					case 0x0487: return "Kinyarwanda/Rwanda";
					case 0x0441: return "Kiswahili/Kenya";
					case 0x0457: return "Konkani/India";
					case 0x0412: return "Korean/Korea";
					case 0x0440: return "Kyrgyz/Kyrgyzstan";
					case 0x0454: return "Lao/Lao P.D.R.";
					case 0x0426: return "Latvian/Latvia";
					case 0x0427: return "Lithuanian/Lithuania";
					case 0x082E: return "Lower Sorbian/Germany";
					case 0x046E: return "Luxembourgish/Luxembourg";
					case 0x042F: return "Macedonian (FYROM)/Former Yugoslav Republic of Macedonia";
					case 0x083E: return "Malay/Brunei Darussalam";
					case 0x043E: return "Malay/Malaysia";
					case 0x044C: return "Malayalam/India";
					case 0x043A: return "Maltese/Malta";
					case 0x0481: return "Maori/New Zealand";
					case 0x047A: return "Mapudungun/Chile";
					case 0x044E: return "Marathi/India";
					case 0x047C: return "Mohawk/Mohawk";
					case 0x0450: return "Mongolian (Cyrillic)/Mongolia";
					case 0x0850: return "Mongolian (Traditional)/People’s Republic of China";
					case 0x0461: return "Nepali/Nepal";
					case 0x0414: return "Norwegian (Bokmal)/Norway";
					case 0x0814: return "Norwegian (Nynorsk)/Norway";
					case 0x0482: return "Occitan/France";
					case 0x0448: return "Odia (formerly Oriya)/India";
					case 0x0463: return "Pashto/Afghanistan";
					case 0x0415: return "Polish/Poland";
					case 0x0416: return "Portuguese/Brazil";
					case 0x0816: return "Portuguese/Portugal";
					case 0x0446: return "Punjabi/India";
					case 0x046B: return "Quechua/Bolivia";
					case 0x086B: return "Quechua/Ecuador";
					case 0x0C6B: return "Quechua/Peru";
					case 0x0418: return "Romanian/Romania";
					case 0x0417: return "Romansh/Switzerland";
					case 0x0419: return "Russian/Russia";
					case 0x243B: return "Sami (Inari)/Finland";
					case 0x103B: return "Sami (Lule)/Norway";
					case 0x143B: return "Sami (Lule)/Sweden";
					case 0x0C3B: return "Sami (Northern)/Finland";
					case 0x043B: return "Sami (Northern)/Norway";
					case 0x083B: return "Sami (Northern)/Sweden";
					case 0x203B: return "Sami (Skolt)/Finland";
					case 0x183B: return "Sami (Southern)/Norway";
					case 0x1C3B: return "Sami (Southern)/Sweden";
					case 0x044F: return "Sanskrit/India";
					case 0x1C1A: return "Serbian (Cyrillic)/Bosnia and Herzegovina";
					case 0x0C1A: return "Serbian (Cyrillic)/Serbia";
					case 0x181A: return "Serbian (Latin)/Bosnia and Herzegovina";
					case 0x081A: return "Serbian (Latin)/Serbia";
					case 0x046C: return "Sesotho sa Leboa/South Africa";
					case 0x0432: return "Setswana/South Africa";
					case 0x045B: return "Sinhala/Sri Lanka";
					case 0x041B: return "Slovak/Slovakia";
					case 0x0424: return "Slovenian/Slovenia";
					case 0x2C0A: return "Spanish/Argentina";
					case 0x400A: return "Spanish/Bolivia";
					case 0x340A: return "Spanish/Chile";
					case 0x240A: return "Spanish/Colombia";
					case 0x140A: return "Spanish/Costa Rica";
					case 0x1C0A: return "Spanish/Dominican Republic";
					case 0x300A: return "Spanish/Ecuador";
					case 0x440A: return "Spanish/El Salvador";
					case 0x100A: return "Spanish/Guatemala";
					case 0x480A: return "Spanish/Honduras";
					case 0x080A: return "Spanish/Mexico";
					case 0x4C0A: return "Spanish/Nicaragua";
					case 0x180A: return "Spanish/Panama";
					case 0x3C0A: return "Spanish/Paraguay";
					case 0x280A: return "Spanish/Peru";
					case 0x500A: return "Spanish/Puerto Rico";
					case 0x0C0A: return "Spanish (Modern Sort)/Spain";
					case 0x040A: return "Spanish (Traditional Sort)/Spain";
					case 0x540A: return "Spanish/United States";
					case 0x380A: return "Spanish/Uruguay";
					case 0x200A: return "Spanish/Venezuela";
					case 0x081D: return "Sweden/Finland";
					case 0x041D: return "Swedish/Sweden";
					case 0x045A: return "Syriac/Syria";
					case 0x0428: return "Tajik (Cyrillic)/Tajikistan";
					case 0x085F: return "Tamazight (Latin)/Algeria";
					case 0x0449: return "Tamil/India";
					case 0x0444: return "Tatar/Russia";
					case 0x044A: return "Telugu/India";
					case 0x041E: return "Thai/Thailand";
					case 0x0451: return "Tibetan/PRC";
					case 0x041F: return "Turkish/Turkey";
					case 0x0442: return "Turkmen/Turkmenistan";
					case 0x0480: return "Uighur/PRC";
					case 0x0422: return "Ukrainian/Ukraine";
					case 0x042E: return "Upper Sorbian/Germany";
					case 0x0420: return "Urdu/Islamic Republic of Pakistan";
					case 0x0843: return "Uzbek (Cyrillic)/Uzbekistan";
					case 0x0443: return "Uzbek (Latin)/Uzbekistan";
					case 0x042A: return "Vietnamese/Vietnam";
					case 0x0452: return "Welsh/United Kingdom";
					case 0x0488: return "Wolof/Senegal";
					case 0x0485: return "Yakut/Russia";
					case 0x0478: return "Yi/PRC";
					case 0x046A: return "Yoruba/Nigeria";
				}
				return id.ToString("X4");
			}
		}

		public static string ToName(PlatformID platformID, ushort languageID) {
			switch (platformID) {
				case PlatformID.Unicode:
					break;
				case PlatformID.Macintosh:
					return Macintosh.ToName(languageID);
				case PlatformID.ISO:
					break;
				case PlatformID.Windows:
					return Windows.ToName(languageID);
				case PlatformID.Custom:
					break;
				
			}
			return languageID.ToString("X4");
		}
	}
}
